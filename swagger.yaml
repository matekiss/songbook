swagger: '2.0'
info:
  version: 0.9.0
  title: Songbook
host: example.com
basePath: /
schemes:
  - http
paths:
  /song:
    get:
      tags:
        - song
      summary: Returns all songs
      description: ''
      operationId: getSongs
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              - $ref: '#/definitions/Song'
      security:
        - token: []
    post:
      tags:
        - song
      summary: Add a new song
      description: ''
      operationId: addSong
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      parameters:
        - in: body
          name: body
          description: Song object that needs to be added
          required: true
          schema:
            $ref: '#/definitions/Song'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Song'
        '400':
          description: Invalid ID supplied
      security:
        - token: []
  '/song/{songId}':
    get:
      tags:
        - song
      summary: Find song by ID
      description: Returns a single song
      operationId: getSongById
      produces:
        - application/json
        - application/xml
      parameters:
        - name: songId
          in: path
          description: ID of song to return
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Song'
        '400':
          description: Invalid ID supplied
        '404':
          description: Song not found
      security:
        - token: []
    put:
      tags:
        - song
      summary: Update an existing song
      description: ''
      operationId: updateSong
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      parameters:
        - in: body
          name: body
          description: Song object that needs to be updated
          required: true
          schema:
            $ref: '#/definitions/Song'
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Song not found
      security:
        - token: []
    delete:
      tags:
        - song
      summary: Deletes a song
      description: ''
      operationId: deleteSong
      produces:
        - application/json
        - application/xml
      parameters:
        - name: songId
          in: path
          description: Song ID to delete
          required: true
          type: integer
          format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Song not found
      security:
        - token: []
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      produces:
        - application/json
        - application/xml
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      produces:
        - application/json
        - application/xml
      parameters: []
      responses:
        default:
          description: successful operation
securityDefinitions:
  token:
    type: apiKey
    name: token
    in: header
definitions:
  Song:
    type: object
    properties:
      id:
        type: integer
        format: int64
      title:
        type: string
      lyrics:
        type: string
      favorite:
        type: boolean
        default: false
